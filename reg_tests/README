---------------------------------------------------------------
HOW TO RUN THE REGRESSION TEST SUITE
---------------------------------------------------------------

$Id$

The regression test suite consists of eight Fortran programs
that invoke a subset of IPOLATES (or IPLIB) routines.  IPOLATES
developers are required to run this test suite to ensure their
branch changes perform as expected before they are merged to 
the trunk.

The following steps are required to setup and run the test suite:

(1) Compile the 'test' and 'control' IPOLATES libraries.

   The suite tests all three precision versions of IPOLATES:

   -4 byte integer/4 byte float ("_4")
   -4 byte integer/8 byte float ("_d")
   -8 byte integer/8 byte float ("_8")

   The 'test' libraries are your branch copies, while 
   the 'control' libaries are the head of the trunk.

(2) Link the 'test' and 'control' IPOLATES libraries and 
    their include directories (which contain their Fortran
    module files) to the ./reg_tests/lib directory
    in your branch.  

    The regression test build expects the 'test' and 'control'
    libraries and include directories in the ./reg_tests/lib 
    directory with the following names:

    libip_ctl_4.a  (4 byte integer/4 byte float library, control)
    libip_ctl_8.a  (8 byte integer/8 byte float library, control)
    libip_ctl_d.a  (4 byte integer/8 byte float library, control)
    libip_test_4.a  (4 byte integer/4 byte float library, test)
    libip_test_8.a  (8 byte integer/8 byte float library, test)
    libip_test_d.a  (4 byte integer/8 byte float library, test)

    incmod_ctl_4  (4 byte integer/4 byte float include dir, control)
    incmod_ctl_8  (8 byte integer/8 byte float include dir, control)
    incmod_ctl_d  (4 byte integer/8 byte float include dir, control)
    incmod_test_4 (4 byte integer/4 byte float include dir, test)
    incmod_test_8 (8 byte integer/8 byte float include dir, test)
    incmod_test_d (4 byte integer/8 byte float include dir, test)

    One way to place these libraries and include directories in 
    the ./reg_tests/lib directory is thru unix links.  Suppose
    the trunk and branch libraries were built using an
    'nco-style' installation.  First, change to the
    ./reg_tests/lib directory:

    "cd /branch/reg_tests/lib"

    Then, link each library and include directory to the 
    name expected by the regression test build:
    
    "ln -s /trunk/ip/vX.Y.Z/libip_vX.Y.Z_4.a  ./libip_ctl_4.a"
    "ln -s /trunk/ip/vX.Y.Z/libip_vX.Y.Z_8.a  ./libip_ctl_8.a"
    "ln -s /trunk/ip/vX.Y.Z/libip_vX.Y.Z_d.a  ./libip_ctl_d.a"
    "ln -s /branch/ip/vX.Y.Z/libip_vX.Y.Z_4.a ./libip_test_4.a"
    "ln -s /branch/ip/vX.Y.Z/libip_vX.Y.Z_8.a ./libip_test_8.a"
    "ln -s /branch/ip/vX.Y.Z/libip_vX.Y.Z_d.a ./libip_test_d.a"

    "ln -s /trunk/ip/vX.Y.Z/include/ip_vX.Y.Z_4  ./incmod_ctl_4"
    "ln -s /trunk/ip/vX.Y.Z/include/ip_vX.Y.Z_8  ./incmod_ctl_8"
    "ln -s /trunk/ip/vX.Y.Z/include/ip_vX.Y.Z_d  ./incmod_ctl_d"
    "ln -s /branch/ip/vX.Y.Z/include/ip_vX.Y.Z_4 ./incmod_test_4"
    "ln -s /branch/ip/vX.Y.Z/include/ip_vX.Y.Z_8 ./incmod_test_8"
    "ln -s /branch/ip/vX.Y.Z/include/ip_vX.Y.Z_d ./incmod_test_d"

(3) Check the ./reg_tests/config-setup/*.setup files in your branch.

    These files contain the compiler, compiler flags and link flags 
    used to compile the regression test suite.  There is one file
    for the Intel Fortran compiler (ifort.setup) and one for the
    Cray compiler (crayftn.setup).  The regression suite has
    been run with both compilers on WCOSS-Cray.  On WCOSS-
    Phase 1/2 and Theia, only the Intel compiler has been used.
    You should not need to change the settings in these files.
    To use a different compiler, you will need to create
    your own "setup" file and point to it in the build script
    (see section 5).

(4) Ensure the build process can find the NCEP SP, W3NCO and
    BACIO libraries.

    The build process is run by the "make_reg_tests.ksh"
    script (use the "make_reg_tests_wcoss-cray.sh" script
    on WCOSS-Cray).  The path/name of these libraries
    are stored in the following build script environment variables:
    
    SP_LIB4    - 4 byte integer/4 byte float version
    SP_LIB8    - 8 byte integer/8 byte float version
    SP_LIBd    - 4 byte integer/8 byte float version
    W3NCO_LIB4 - 4 byte integer/4 byte float version
    W3NCO_LIB8 - 8 byte integer/8 byte float version
    W3NCO_LIBd - 4 byte integer/8 byte float version
    BACIO_LIB4 - 4 byte integer/4 byte float version
    BACIO_LIB8 - 8 byte integer/8 byte float version

    There is no mixed precision ("_d") version of BACIO.

    On WCOSS-Phase1/2, WCOSS-Cray, and Theia, these environment
    variables are set via modules in the build script.

    These settings may be overidden or set (if running
    on a machine other than WCOSS or Theia) by manually
    setting the environment variables on the command line
    line before running "make_reg_tests.ksh".  

    Example (if using tcsh):

    setenv W3NCO_LIB4 $pathname/libw3nco_4.a
    setenv SP_LIB4 $pathname/libsp_4.a
    ... and so on ...

(5) Build the regression tests suite.

    The suite is built with the "./reg_tests/make_reg_tests.ksh" script.
    (On WCOSS-Cray, use "make_reg_tests_wcoss-cray.sh".)

    By default, the Intel Fortran compiler is used.  The compiler,
    compiler flags and link flags are stored in ./config-setup/ifort.setup,
    which is sourced by the build script.  To use the "crayftn.setup" file
    or your own setup file, you will need to manually edit the
    build script.

    To build, type "make_reg_tests.ksh" (use "make_reg_tests_wcoss-cray.sh
                                         on WCOSS-Cray).

    Log output from the 'ctl' and 'test' builds will be in the
    config*log files.  There will be six executables for
    each individual regression test (one for each 'ctl' and 'test' library version).
    These executables will be located in the ./exec sub-directory for
    the regression test.  The source code is in the ./sorc sub-directory.

(6) Kickoff the regression test suite.

    There are driver run scripts for WCOSS and Theia located in
    ./reg_tests. 

    To start the tests on WCOSS-Phase 1/2, simply type the script name -
    Runall.wcoss.ksh - on the command line.  A series of
    "daisy-chained" jobs steps will be submitted.  To check
    the job queue type "bjobs".

    On WCOSS-Cray, start the tests by invoking the "Runall.wcoss-cray.ksh" 
    script on the command line.   A series of  "daisy-chained" jobs steps
    will be submitted.  To check the job queue type "bjobs".

    On Theia, the "Runall.theia.ksh" script is used.  Before running, 
    set the project code that will be charged when running the test
    suite.  The project code is script variable $PROJECT_CODE. The
    default is the "rm" project.  You may change the code by manually
    editing the script or doing "setenv PROJECT_CODE $code_name" on 
    the command line.  To find out which projects you
    are authorized to use, type "account_params".  After
    setting the project code, start the tests by typing
    "Runall.theia.ksh" on the command line.  A series of
    "daisy-chained" jobs steps will be submitted.  To check
    the job queue, type: "showq -n -v -u USERNAME"
    
(7) Check results.

    On WCOSS-Phase1/2, the default run directory is /stmpp1/${LOGNAME}/regression
    On WCOSS-Cray, the default run directory is /gpfs/hps/stmp/${LOGNAME}/regression
    On Theia, the default run directory is /scratch3/NCEPDEV/stmp1/$LOGNAME/regression
    (The run directory is variable $WORK_DIR in the driver script).

    Log output from the test suite will be in "regression.log"  To monitor as
    the suite is running, do: grep ">>>" regression.log
    
    Once the suite is complete, a summary is placed in "summary.log"   Any failures
    should be investigated.

---------------------------------------------------------------
DETAILS ON EACH INDIVIDUAL REGRESSION TEST
---------------------------------------------------------------

The tests in the following subdirectories are designed to test 
a subset of IPLIB.  It was too difficult to create a single test
that exercised every routine.  

1)  gausslat - A fortran program that calls routine gausslat 
    to calculate the gaussian latitudes for a t382 grid.
2)  gdswzd - A fortran program that calls gdswzd
    and all of its child routines to calculate lat/lon and
    other map-related fields for several grids of
    of various map projections.
3)  ipolates - A fortran program that interpolates a global
    lat/lon grid of substrate temperature to several grids of various
    projections using the ipolates suite of routines.  All
    interpolation options (bilinear, neighbor, etc.) are used.
4)  ipolatev - A fortran program that interpolates a global
    lat/lon grid of vector u/v wind to several grids of various
    projections using the ipolatev suite of routines.  All
    interpolation options (bilinear, neighbor, etc.) are used.
5)  ipxwafs2_3 - Test ip routines ipxwafs2 and ipxwafs3 by transforming
    a global grid of 600 mb temperature (on ncep grid 3) to wafs grids 37 thru 44 
    using copygb. After the global to wafs grid transforms are
    completed, copygb is invoked again to transform temperature data on each
    wafs grid back to ncep grid 3.  Note: routine ipxwafs2 is invoked 
    for interpolation option '0' (bilinear) and routine ipxwafs3 
    is invoked for interpolation option '2' (neighbor).
6)  ipxwafs - Same as experiment 5 except a specially modified version
    of copygb is used to call iplib routine ipxwafs instead of ipxwafs2. 
    ipxwafs and ipxwafs2 are the same except the latter accounts for bitmaps.
7)  makgds - A fortran program to test routine makgds.  Routine is called
    three times.
      1) Create gds and kgds arrays for ncep grid 3. these arrays hold grid
         description information used by w3 grib library.
      2) Make kgds array for grid 3 from gds array
      3) Make gds array for grid 3 from kgds array
8)  copygb - The ncep copygb program is used to transform a global lat/lon file of
    vegetation greenness to numerous standard ncep grids using all available
    interpolation options (bilinear, nearest neighbor, etc.).  Because this 
    test can take over an hour of wall clock time, and calls the same
    routines as other regression tests, it is not currently called
    from the regression driver scripts.  However, it may be run stand-alone.
    Note: The copygb executables are used by the ixpwafs2_3 regresion test.

Within each regression directory, the ./sorc subdirectory will contain the
source code and make-related files required for the regression test. A script
to run the individual regression test is under the ./scripts subdirectory.
The executables (after compilation) are stored under the ./exec subdirectory.
Any input data is stored in the ./data subdirectory.  Grads control files
to view any binary output data are stored in the ./grads subdirectory.  Some control
files do not have map backgrounds specified.  They are only used to
sanity check the data.  So when viewing, do a 'set mproj off'. 

More detailed information about each test is described in a README file in that
test's subdirectory.

Below is a table of each routine (or module) in iplib and which regression test(s) invoke it.

subroutine or
module name             regression test
===============         ===============

gausslat                gausslat
gdswzd                  gdswzd, ipolates, ipolatev, ipxwafs, ipxwafs2_3, copygb
gdswzd00                gdswzd, ipolates, ipolatev, ipxwafs, ipxwafs2_3, copygb
gdswzd01                gdswzd, ipolates, ipolatev, copygb
gdswzd03                gdswzd, ipolates, ipolatev, copygb
gdswzd04                gdswzd, ipolates, ipolatev, copygb
gdswzd05                gdswzd, ipolates, ipolatev, copygb
gdswzdcb                gdswzd, ipolates, ipolatev, copygb
gdswzdcd                gdswzd, ipolates, ipolatev, copygb
ijkgds0                 ipolates, ipolatev, ipxwafs, ipxwafs2_3, copygb
ijkgds1                 ipolates, ipolatev, ipxwafs, ipxwafs2_3
ipolates                ipolates, ipxwafs, ipxwafs2_3, copygb
ipolatev                ipolatev
ipxwafs                 ipxwafs, ipxwafs2_3
ipxwafs2                ipxwafs2_3, copygb
ipxwafs3                ipxwafs2_3, copygb
makgds                  ipxwafs, ipxwafs2_3, makgds
movect                  ipolatev
polates0                ipolates, ipxwafs, ipxwafs2_3, copygb
polates1                ipolates, copygb
polates2                ipolates, ipxwafs2_3, copygb
polates3                ipolates, copygb
polates4                ipolates, copygb
polates6                ipolates, copygb
polatev0                ipolatev
polatev1                ipolatev
polatev2                ipolatev
polatev3                ipolatev
polatev4                ipolatev
polatev6                ipolatev
polfixs                 ipolates, ipxwafs, ipxwafs2_3
polfixv                 ipolatev
