# This is a CI workflow for the NCEPLIBS-ip project.
#
# This workflow builds with the Intel Classic and OneAPI compilers.
#
# Ed Hartnett, 1/8/23
name: Intel
on:
  push:
    branches:
    - develop
  pull_request:
    branches:
    - develop

# Use custom shell with -l so .bash_profile is sourced which loads intel/oneapi/setvars.sh
# without having to do it in manually every step
defaults:
  run:
    shell: bash -leo pipefail {0}

jobs:
  Intel:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        openmp: [ ON, OFF ]
        compilers: ["CC=icc FC=ifort", "CC=icx FC=ifx"]

    steps:

    # See https://software.intel.com/content/www/us/en/develop/articles/oneapi-repo-instructions.html
    - name: install-intel
      run: |
        cd /tmp
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
        sudo apt-get install intel-oneapi-dev-utilities intel-oneapi-mpi-devel intel-oneapi-openmp intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
        echo "source /opt/intel/oneapi/setvars.sh" >> ~/.bash_profile

    - name: checkout
      uses: actions/checkout@v2
      with: 
        path: ip

    - name: build
      run: |
        cd ip
        mkdir build 
        cd build
        ${{ matrix.compilers }} cmake -DOPENMP=${{ matrix.openmp }} -DBUILD_SHARED_LIBS=OFF -DBUILD_8=ON ..
        make -j2 VERBOSE=1
    
    - name: test
      run: |
        ulimit -s unlimited
        cd $GITHUB_WORKSPACE/ip/build
        ctest --verbose --output-on-failure --rerun-failed
