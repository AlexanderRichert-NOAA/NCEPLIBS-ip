Unit test for the NCEP IPOLATES library (IPLIB).

ABSTRACT:

This test invokes IPOLATES to interpolate scalar and
vector data to several grids of various map projections
using all IPOLATES interpolation options.  The output 
is compared to baseline data and a summary of differences is
sent to standard output.

DIRECTORY LAYOUT:

./sorc - Contains the files and scripts needed to build the
         unit test programs.  And the programs themselves.

./sorc/scalar -
         Contains a Fortran program to call routine ipolates
         to interpolate a global field of albedo data to
         several grids and using all interpolation options.

./sorc/vector -
         Contains a Fortran program to call routine ipolatev
         to interpolate a global field of u/v wind data to
         several grids and using all interpolation options.

./exec - Contains the unit test executables.  There is one executable
         for the single ("4"), double ("8") and mixed ("d") precision
         versions of the IPOLATES library:

         scalar_4.exe
         scalar_8.exe
         scalar_d.exe
         vector_4.exe
         vector_8.exe
         vector_d.exe

./work - The working directory for program execution.

./lib  - The location of the IPOLATES libraries and module files as
         expected by the unit test programs.

./scripts - Contains scripts to run this unit test.

./input_data - Contains the input scalar and vector data.  The 
               data are in binary little endian format:

               ./scalar/global_snoalb.bin    (global snow albedo)
               ./vector/global_uv_wind.bin   (global 500mb u/v wind)

./baseline_data - Contains the baseline set of scalar and vector data 
                  interpolated to each NCEP grid. Binary, little endian
                  format.  Output from each call to routine ipolates and
                  ipolatev is compared to its baseline counterpart.  There
                  are sub-directories for the scalar and vector data.
                  And under these sub-directories, there are sub-directories
                  for the single (4_byte_bin) and mixed/double (8_byte_bin)
                  versions of the IPOLATES library.  The file names
                  contain the grid number and IPOLATES interpolation
                  option (defined below); i.e.:

                  grid${gridnum}.opt${ip_option}.bin_4/8

                  Grads control files for each file are located in the
                  ./grads subdirectory.

HOW THE TEST WORKS:

There are two separate programs to test the scalar and vector interpolation.
The scalar program calls routine ipolates to interpolate a global field
of snow albedo to several grids of various map projections and
using all IPOLATES interpolation options.  Likewise, the vector program
calls routine ipolatev to interpolate a global field of 500mb u/w wind.
The specific tests are:

  - grid 3 (global one-deg lat/lon) using bilinear (IP option "0")
  - grid 8 (mercator) using bicubic (IP option "1")
  - grid 127 (gaussian lat/lon) using neighbor (IP option "2")
  - grid 203 (rotated lat/lon "E") using budget (IP option "3")
  - grid 205 (rotated lat/lon "B") using spectral (IP option "4")
  - grid 212 (polar stereographic) using neighbor-budget (IP option "6")
  - grid 218 (lambert conformal) using bilinear (IP option "0")

Some grid numbers refer to an NCEP grib 1 standard grid.  Others
refer to the grib 1 data representation type.

The output from each call to ipolates and ipolatev is compared to its
baseline counterpart in the ./baseline data directory.  This baseline 
data was created using the Intel Fortran compiler.  Differences from
the baseline data are computed and sent to standard output. For this
unit test to pass the differences should be "small".

HOW TO RUN THE TEST:

1) Build the IPOLATES library.  Go to $root and read the
README.build file for details.  By default, the libraries and
module files are installed using the "nco" option on WCOSS as follows:

  libraries:
   $root/ip/vX.Y.Z/libip_vX.Y.Z_4.a  (single precision)
   $root/ip/vX.Y.Z/libip_vX.Y.Z_d.a  (mixed precision)
   $root/ip/vX.Y.Z/libip_vX.Y.Z_8.a  (double precistion)

  module file directories:
   $root/ip/vX.Y.Z/incmod_4  (single precision)
   $root/ip/vX.Y.Z/incmod_d  (mixed precision)
   $root/ip/vX.Y.Z/incmod_8  (double precistion)

2) Ensure the ./lib directory contains (or links to) the IPOLATES libraries and
its module files.  The ./lib directory already contains links that point to the
libraries and module files as they would exist when using the "nco" install
option from step (1).  I.e:

 incmod_4 -> $root/ip/vX.Y.Z/incmod/ip_vX.Y.Z_4
 incmod_d -> $root/ip/vX.Y.Z/incmod/ip_vX.Y.Z_d
 incmod_8 -> $root/ip/vX.Y.Z/incmod/ip_vX.Y.Z_8

 libip_4.a -> $root/ip/vX.Y.Z/libip_vX.Y.Z_4.a
 libip_d.a -> $root/ip/vX.Y.Z/libip_vX.Y.Z_d.a
 libip_8.a -> $root/ip/vX.Y.Z/libip_vX.Y.Z_8.a

So if that is how IPOLATES was built in step (1), there is
nothing more to do.  

However, if you want to build with another version of the library,
you will need to adjust these links.  Example: Suppose you want to
test with the OPS version of IPOLATES on WCOSS.  You would set the
links as follows:

 incmod_4 -> /nwprod2/lib/ip/vX.Y.Z/incmod/ip_vX.Y.Z_4
 incmod_d -> /nwprod2/lib/ip/vX.Y.Z/incmod/ip_vX.Y.Z_d
 incmod_8 -> /nwprod2/lib/ip/vX.Y.Z/incmod/ip_vX.Y.Z_8
 
 libip_4.a -> /nwprod2/lib/ip/vX.Y.Z/libip_vX.Y.Z_4.a
 libip_d.a -> /nwprod2/lib/ip/vX.Y.Z/libip_vX.Y.Z_d.a
 libip_8.a -> /nwprod2/lib/ip/vX.Y.Z/libip_vX.Y.Z_8.a

3) Build the "scalar" and "vector" unit test programs 
by running the "make_unit_test.ksh" script.  

The IPOLATES library is dependant on the NCEP SP 
(spectral) library (SPLIB).  Intel compiled versions of SPLIB
exist on Theia and WCOSS.  When running "make_unit_test.ksh"
on these machines, these SP libraries are automatically
located by module loads and stored in these 
environment variables:

 SP_LIB4 (single precision)
 SP_LIBd (mixed precision)
 SP_LIB8 (double precistion)

If you are testing on a machine other than WCOSS or Theia, 
or you have compiled IPOLATES with a compiler other than Intel,
you will need to locate (or build) SPLIB and set these environment
varibles by editing "make_unit_test.ksh", or by exporting
these variables on the command line before invoking it.
Example (when using bash):

 export SP_LIB4=$directory/libsp_4.a

Once the SP libraries have been located, run "make_unit_test.ksh" 
from the command line.  The script takes one argument: the
"config-setup" file that was used to compile IPOLATES.  
So, if you built IPOLATES with the Intel optimized option, 
you would invoke as follows:

 ./make_unit_test.ksh ifort.setup

4) Run the unit test.  Go to ./scripts.  To run interactively, type:

 ./run_unit_test.ksh

You may want to pipe the output to a log fle.  Check output for any 
"large" differences between the computed and baseline data.

To run "run_unit_test.ksh" on the WCOSS or Theia compute nodes,
invoke these driver scripts as follows:

 cat run_wcoss.lsf | bsub   (WCOSS Phase 1/2)
 qsub run_theia.ksh         (Theia)

QUESTIONS:

Contact: george.gayno@noaa.gov
